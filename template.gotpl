type {{ $.InterfaceName }} interface {
{{range .MethodSet}}
	{{.Name}}(context.Context, *{{.Request}}) (*{{.Reply}}, error)
{{end}}
}
func Register{{ $.InterfaceName }}(r fiber.Router, srv {{ $.InterfaceName }}) {
	s := {{.Name}}{
		server: srv,
		router:     r,
	}
	s.RegisterService()
}

type {{$.Name}} struct{
	server {{ $.InterfaceName }}
	router fiber.Router
}

{{range .Methods}}
func (s *{{$.Name}}) {{ .HandlerName }} (ctx *fiber.Ctx) error {
	var in {{.Request}}
{{if .HasPathParams }}
	if err := ctx.ParamsParser(&in); err != nil {
		return err
	}
{{end}}
{{if eq .Method "GET" "DELETE" }}
	if err := ctx.QueryParser(&in); err != nil {
		return err
	}
{{else if eq .Method "POST" "PUT" }}
	if err := ctx.BodyParser(&in); err != nil {
		return err
	}
{{else}}
	if err := ctx.BodyParser(&in); err != nil {
		return err
	}
{{end}}
	md := metadata.New(ctx.GetReqHeaders())
	newCtx := metadata.NewIncomingContext(ctx.Context(), md)
	out, err := s.server.({{ $.InterfaceName }}).{{.Name}}(newCtx, &in)
	if err != nil {
		return err
	}

	return ctx.Status(200).JSON(out)
}
{{end}}

func (s *{{$.Name}}) RegisterService() {
{{range .Methods}}
		s.router.Add("{{.Method}}", "{{.Path}}", s.{{ .HandlerName }})
{{end}}
}